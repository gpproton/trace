// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trace.Infrastructure.EFCore.Context;

#nullable disable

namespace Trace.Infrastructure.EFCore.Migrations
{
    [DbContext(typeof(ServiceContext))]
    partial class ServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Account.AccountAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("Schedule")
                        .HasColumnType("boolean")
                        .HasColumnName("schedule");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int[]>("Types")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("types");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_account_alerts");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_alerts_account_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_account_alerts_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_account_alerts_tenant_id");

                    b.ToTable("account_alerts", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Account.AccountSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("UserAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_account_id");

                    b.ComplexProperty<Dictionary<string, object>>("Map", "Trace.Application.Account.AccountSetting.Map#MapOption", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("AutoInvoice")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_invoice");

                            b1.Property<bool>("AutoOrder")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_order");

                            b1.Property<bool>("AutoRoute")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_route");

                            b1.Property<bool>("AutoRouteCost")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_route_cost");

                            b1.Property<bool>("AutoZoneOtp")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_zone_otp");

                            b1.Property<string>("BingApiKey")
                                .HasColumnType("text")
                                .HasColumnName("map_bing_api_key");

                            b1.Property<bool>("EnableTrip")
                                .HasColumnType("boolean")
                                .HasColumnName("map_enable_trip");

                            b1.Property<string>("GoogleApiKey")
                                .HasColumnType("text")
                                .HasColumnName("map_google_api_key");

                            b1.Property<string>("MapBoxApiKey")
                                .HasColumnType("text")
                                .HasColumnName("map_map_box_api_key");

                            b1.Property<string>("MapType")
                                .HasColumnType("text")
                                .HasColumnName("map_map_type");

                            b1.Property<bool>("VerifyOtp")
                                .HasColumnType("boolean")
                                .HasColumnName("map_verify_otp");

                            b1.Property<int?>("Zoom")
                                .HasColumnType("integer")
                                .HasColumnName("map_zoom");

                            b1.Property<int?>("ZoomSelection")
                                .HasColumnType("integer")
                                .HasColumnName("map_zoom_selection");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Option", "Trace.Application.Account.AccountSetting.Option#ProfileOption", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Hour24Time")
                                .HasColumnType("boolean")
                                .HasColumnName("option_hour24time");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("option_language");

                            b1.Property<string>("Timezone")
                                .HasColumnType("text")
                                .HasColumnName("option_timezone");

                            b1.Property<string>("Token")
                                .HasColumnType("text")
                                .HasColumnName("option_token");

                            b1.Property<string>("UnitArea")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_area");

                            b1.Property<string>("UnitDistance")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_distance");

                            b1.Property<string>("UnitForce")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_force");

                            b1.Property<string>("UnitPower")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_power");

                            b1.Property<string>("UnitPressure")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_pressure");

                            b1.Property<string>("UnitSpeed")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_speed");

                            b1.Property<string>("UnitTemperature")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_temperature");

                            b1.Property<string>("UnitVolume")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_volume");

                            b1.Property<string>("UnitWeight")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_weight");
                        });

                    b.HasKey("Id")
                        .HasName("pk_account_settings");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_account_settings_tenant_id");

                    b.HasIndex("UserAccountId")
                        .IsUnique()
                        .HasDatabaseName("ix_account_settings_user_account_id");

                    b.ToTable("account_settings", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Account.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<int>("DefaultRole")
                        .HasColumnType("integer")
                        .HasColumnName("default_role");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_asp_net_users_contact_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_users_role_id");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_asp_net_users_user_name");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_users_tenant_id_email");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Account.UserPermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Feature")
                        .HasColumnType("text")
                        .HasColumnName("feature");

                    b.Property<string>("Module")
                        .HasColumnType("text")
                        .HasColumnName("module");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.ComplexProperty<Dictionary<string, object>>("Actions", "Trace.Application.Account.UserPermissions.Actions#CrudAction", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Create")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_create");

                            b1.Property<bool>("Delete")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_delete");

                            b1.Property<bool>("Read")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_read");

                            b1.Property<bool>("Update")
                                .HasColumnType("boolean")
                                .HasColumnName("actions_update");
                        });

                    b.HasKey("Id")
                        .HasName("pk_user_permissions");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_user_permissions_deleted_at");

                    b.HasIndex("Feature")
                        .HasDatabaseName("ix_user_permissions_feature");

                    b.HasIndex("Module")
                        .HasDatabaseName("ix_user_permissions_module");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_permissions_role_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_user_permissions_tenant_id");

                    b.ToTable("user_permissions", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Account.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<int>("Root")
                        .HasColumnType("integer")
                        .HasColumnName("root");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_asp_net_roles_name");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Asset.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("barcode");

                    b.Property<Guid?>("CategoryId")
                        .HasMaxLength(256)
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Decommissioned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("decommissioned");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Deployed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("serial_number");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_assets");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_assets_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_assets_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_assets_tenant_id");

                    b.HasIndex("SerialNumber", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_assets_serial_number_tenant_id");

                    b.ToTable("assets", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Asset.AssetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_asset_categories");

                    b.ToTable("asset_categories", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Device.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("barcode");

                    b.Property<Guid?>("CategoryId")
                        .HasMaxLength(256)
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Decommissioned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("decommissioned");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Deployed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<DateTimeOffset?>("LastMoved")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_moved");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<int>("SpeedLimit")
                        .HasColumnType("integer")
                        .HasColumnName("speed_limit");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("unique_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_devices_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_devices_deleted_at");

                    b.HasIndex("LastUpdate")
                        .HasDatabaseName("ix_devices_last_update");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_devices_position_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_devices_status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_devices_tenant_id");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("ix_devices_unique_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Device.DeviceCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<int>("Delay")
                        .HasColumnType("integer")
                        .HasColumnName("delay");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Messages")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messages");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_device_commands");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_device_commands_name");

                    b.ToTable("device_commands", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Engagement.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<string>("Country")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("country");

                    b.Property<string>("County")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("county");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("home_phone");

                    b.Property<string>("Line1")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("line1");

                    b.Property<string>("Line2")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("line2");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_addresses_contact_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_addresses_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_addresses_tenant_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Engagement.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("full_name");

                    b.Property<string>("JobPosition")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("job_position");

                    b.Property<bool>("Married")
                        .HasColumnType("boolean")
                        .HasColumnName("married");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("mobile");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer")
                        .HasColumnName("relation_type");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Website")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_contacts_company_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_contacts_deleted_at");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_tenant_id");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique()
                        .HasDatabaseName("ix_contacts_tenant_id_email");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Engagement.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Source")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("source");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_leads");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_leads_contact_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_leads_deleted_at");

                    b.ToTable("leads", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Engagement.Opportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_opportunities");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_opportunities_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_opportunities_tenant_id");

                    b.ToTable("opportunities", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Location.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("address");

                    b.Property<DateTimeOffset?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int?>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("Address")
                        .HasDatabaseName("ix_locations_address");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_locations_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_locations_deleted_at");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_name_tenant_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Location.LocationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_location_categories");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_location_categories_name_tenant_id");

                    b.ToTable("location_categories", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Routes.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("ApprovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("approved_by");

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("color");

                    b.Property<int?>("CompletedRate")
                        .HasColumnType("integer")
                        .HasColumnName("completed_rate");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Point>("Destination")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("destination");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<LineString>("Path")
                        .HasColumnType("geometry")
                        .HasColumnName("path");

                    b.Property<decimal>("RestDuration")
                        .HasColumnType("numeric")
                        .HasColumnName("rest_duration");

                    b.Property<Point>("Source")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("source");

                    b.Property<int?>("SpeedLimit")
                        .HasColumnType("integer")
                        .HasColumnName("speed_limit");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<decimal>("ToleranceDuration")
                        .HasColumnType("numeric")
                        .HasColumnName("tolerance_duration");

                    b.HasKey("Id")
                        .HasName("pk_routes");

                    b.HasIndex("Description")
                        .HasDatabaseName("ix_routes_description");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_routes_name_tenant_id");

                    b.ToTable("routes", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("color");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trailer_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_tags_contact_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tags_deleted_at");

                    b.HasIndex("LeadId")
                        .HasDatabaseName("ix_tags_lead_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_tags_location_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_tags_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_tags_parent_id");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("ix_tags_route_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tags_tenant_id");

                    b.HasIndex("TrailerId")
                        .HasDatabaseName("ix_tags_trailer_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_tags_vehicle_id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tags.TagMembers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_tag_members");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_tag_members_account_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tag_members_deleted_at");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_tag_members_name");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_tag_members_tag_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tag_members_tenant_id");

                    b.ToTable("tag_members", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Logo")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<Guid?>("Token")
                        .HasColumnType("uuid")
                        .HasColumnName("token");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_tenants_name");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantDomains", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("domain");

                    b.Property<DateTimeOffset?>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<string>("Registrar")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("registrar");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_tenant_domains");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_tenant_domains_deleted_at");

                    b.HasIndex("Domain")
                        .HasDatabaseName("ix_tenant_domains_domain");

                    b.HasIndex("Expiry")
                        .HasDatabaseName("ix_tenant_domains_expiry");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tenant_domains_tenant_id");

                    b.ToTable("tenant_domains", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.ComplexProperty<Dictionary<string, object>>("Map", "Trace.Application.Tenant.TenantSetting.Map#MapOption", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("AutoInvoice")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_invoice");

                            b1.Property<bool>("AutoOrder")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_order");

                            b1.Property<bool>("AutoRoute")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_route");

                            b1.Property<bool>("AutoRouteCost")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_route_cost");

                            b1.Property<bool>("AutoZoneOtp")
                                .HasColumnType("boolean")
                                .HasColumnName("map_auto_zone_otp");

                            b1.Property<string>("BingApiKey")
                                .HasColumnType("text")
                                .HasColumnName("map_bing_api_key");

                            b1.Property<bool>("EnableTrip")
                                .HasColumnType("boolean")
                                .HasColumnName("map_enable_trip");

                            b1.Property<string>("GoogleApiKey")
                                .HasColumnType("text")
                                .HasColumnName("map_google_api_key");

                            b1.Property<string>("MapBoxApiKey")
                                .HasColumnType("text")
                                .HasColumnName("map_map_box_api_key");

                            b1.Property<string>("MapType")
                                .HasColumnType("text")
                                .HasColumnName("map_map_type");

                            b1.Property<bool>("VerifyOtp")
                                .HasColumnType("boolean")
                                .HasColumnName("map_verify_otp");

                            b1.Property<int?>("Zoom")
                                .HasColumnType("integer")
                                .HasColumnName("map_zoom");

                            b1.Property<int?>("ZoomSelection")
                                .HasColumnType("integer")
                                .HasColumnName("map_zoom_selection");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Option", "Trace.Application.Tenant.TenantSetting.Option#ProfileOption", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Hour24Time")
                                .HasColumnType("boolean")
                                .HasColumnName("option_hour24time");

                            b1.Property<string>("Language")
                                .HasColumnType("text")
                                .HasColumnName("option_language");

                            b1.Property<string>("Timezone")
                                .HasColumnType("text")
                                .HasColumnName("option_timezone");

                            b1.Property<string>("Token")
                                .HasColumnType("text")
                                .HasColumnName("option_token");

                            b1.Property<string>("UnitArea")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_area");

                            b1.Property<string>("UnitDistance")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_distance");

                            b1.Property<string>("UnitForce")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_force");

                            b1.Property<string>("UnitPower")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_power");

                            b1.Property<string>("UnitPressure")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_pressure");

                            b1.Property<string>("UnitSpeed")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_speed");

                            b1.Property<string>("UnitTemperature")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_temperature");

                            b1.Property<string>("UnitVolume")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_volume");

                            b1.Property<string>("UnitWeight")
                                .HasColumnType("text")
                                .HasColumnName("option_unit_weight");
                        });

                    b.HasKey("Id")
                        .HasName("pk_tenant_settings");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_settings_tenant_id");

                    b.ToTable("tenant_settings", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Trailer.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("barcode");

                    b.Property<Guid?>("CategoryId")
                        .HasMaxLength(256)
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Decommissioned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("decommissioned");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Deployed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed");

                    b.Property<string>("FleetIdentifier")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fleet_identifier");

                    b.Property<int>("HorsePower")
                        .HasColumnType("integer")
                        .HasColumnName("horse_power");

                    b.Property<string>("Model")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<long>("Odometer")
                        .HasColumnType("bigint")
                        .HasColumnName("odometer");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("UniqueId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("unique_id");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<decimal>("WeightCapacity")
                        .HasColumnType("numeric")
                        .HasColumnName("weight_capacity");

                    b.HasKey("Id")
                        .HasName("pk_trailers");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_trailers_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_trailers_deleted_at");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_trailers_tenant_id");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("ix_trailers_unique_id");

                    b.HasIndex("FleetIdentifier", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_trailers_fleet_identifier_tenant_id");

                    b.HasIndex("Name", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_trailers_name_tenant_id");

                    b.ToTable("trailers", (string)null);
                });

            modelBuilder.Entity("Trace.Application.Vehicle.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("barcode");

                    b.Property<Guid?>("CategoryId")
                        .HasMaxLength(256)
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Color")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("color");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("Decommissioned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("decommissioned");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTimeOffset?>("Deployed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deployed");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("FleetIdentifier")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("fleet_identifier");

                    b.Property<int>("FuelCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_capacity");

                    b.Property<int>("FuelType")
                        .HasColumnType("integer")
                        .HasColumnName("fuel_type");

                    b.Property<int>("HorsePower")
                        .HasColumnType("integer")
                        .HasColumnName("horse_power");

                    b.Property<string>("Model")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("model");

                    b.Property<long>("Odometer")
                        .HasColumnType("bigint")
                        .HasColumnName("odometer");

                    b.Property<string>("RegistrationNo")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("registration_no");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uuid")
                        .HasColumnName("trailer_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<decimal>("WeightCapacity")
                        .HasColumnType("numeric")
                        .HasColumnName("weight_capacity");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_vehicles_category_id");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_vehicles_deleted_at");

                    b.HasIndex("DeviceId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_device_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_vehicles_tenant_id");

                    b.HasIndex("TrailerId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_trailer_id");

                    b.HasIndex("FleetIdentifier", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_fleet_identifier_tenant_id");

                    b.HasIndex("RegistrationNo", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_registration_no_tenant_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Account.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Account.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Account.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Account.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Trace.Application.Account.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Trace.Application.Account.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Trace.Application.Account.AccountAlert", b =>
                {
                    b.HasOne("Trace.Application.Account.UserAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_account_alerts_user_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Trace.Application.Account.AccountSetting", b =>
                {
                    b.HasOne("Trace.Application.Account.UserAccount", null)
                        .WithOne("AccountSetting")
                        .HasForeignKey("Trace.Application.Account.AccountSetting", "UserAccountId")
                        .HasConstraintName("fk_account_settings_user_account_user_account_id");
                });

            modelBuilder.Entity("Trace.Application.Account.UserAccount", b =>
                {
                    b.HasOne("Trace.Application.Engagement.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_asp_net_users_contacts_contact_id");

                    b.HasOne("Trace.Application.Account.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_users_user_role_role_id");

                    b.Navigation("Contact");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Trace.Application.Account.UserPermissions", b =>
                {
                    b.HasOne("Trace.Application.Account.UserRole", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_permissions_user_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Trace.Application.Asset.Asset", b =>
                {
                    b.HasOne("Trace.Application.Asset.AssetCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_assets_asset_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Device.Device", b =>
                {
                    b.HasOne("Trace.Application.Asset.AssetCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_devices_asset_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Engagement.Address", b =>
                {
                    b.HasOne("Trace.Application.Engagement.Contact", "Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_addresses_contacts_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Trace.Application.Engagement.Contact", b =>
                {
                    b.HasOne("Trace.Application.Engagement.Contact", "Company")
                        .WithMany("Relations")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_contacts_contacts_company_id");

                    b.HasOne("Trace.Application.Tenant.Tenant", null)
                        .WithOne("Contact")
                        .HasForeignKey("Trace.Application.Engagement.Contact", "TenantId")
                        .HasConstraintName("fk_contacts_tenants_tenant_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Trace.Application.Engagement.Lead", b =>
                {
                    b.HasOne("Trace.Application.Engagement.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_leads_contacts_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Trace.Application.Location.Location", b =>
                {
                    b.HasOne("Trace.Application.Location.LocationCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_locations_location_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Tags.Tag", b =>
                {
                    b.HasOne("Trace.Application.Engagement.Contact", null)
                        .WithMany("Tags")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_tags_contacts_contact_id");

                    b.HasOne("Trace.Application.Engagement.Lead", null)
                        .WithMany("Tags")
                        .HasForeignKey("LeadId")
                        .HasConstraintName("fk_tags_leads_lead_id");

                    b.HasOne("Trace.Application.Location.Location", null)
                        .WithMany("Tags")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_tags_locations_location_id");

                    b.HasOne("Trace.Application.Tags.Tag", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_tags_tags_parent_id");

                    b.HasOne("Trace.Application.Routes.Route", null)
                        .WithMany("Tags")
                        .HasForeignKey("RouteId")
                        .HasConstraintName("fk_tags_routes_route_id");

                    b.HasOne("Trace.Application.Trailer.Trailer", null)
                        .WithMany("Tags")
                        .HasForeignKey("TrailerId")
                        .HasConstraintName("fk_tags_trailers_trailer_id");

                    b.HasOne("Trace.Application.Vehicle.Vehicle", null)
                        .WithMany("Tags")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_tags_vehicles_vehicle_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Trace.Application.Tags.TagMembers", b =>
                {
                    b.HasOne("Trace.Application.Account.UserAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_tag_members_user_account_account_id");

                    b.HasOne("Trace.Application.Tags.Tag", "Tag")
                        .WithMany("Members")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_tag_members_tags_tag_id");

                    b.Navigation("Account");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantDomains", b =>
                {
                    b.HasOne("Trace.Application.Tenant.Tenant", "Tenant")
                        .WithMany("Domains")
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_tenant_domains_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Trace.Application.Tenant.TenantSetting", b =>
                {
                    b.HasOne("Trace.Application.Tenant.Tenant", "Tenant")
                        .WithOne("Setting")
                        .HasForeignKey("Trace.Application.Tenant.TenantSetting", "TenantId")
                        .HasConstraintName("fk_tenant_settings_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Trace.Application.Trailer.Trailer", b =>
                {
                    b.HasOne("Trace.Application.Asset.AssetCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_trailers_asset_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Trace.Application.Vehicle.Vehicle", b =>
                {
                    b.HasOne("Trace.Application.Asset.AssetCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_vehicles_asset_categories_category_id");

                    b.HasOne("Trace.Application.Device.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_vehicles_devices_device_id");

                    b.HasOne("Trace.Application.Trailer.Trailer", "Trailer")
                        .WithOne("Vehicle")
                        .HasForeignKey("Trace.Application.Vehicle.Vehicle", "TrailerId")
                        .HasConstraintName("fk_vehicles_trailers_trailer_id");

                    b.Navigation("Category");

                    b.Navigation("Device");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("Trace.Application.Account.UserAccount", b =>
                {
                    b.Navigation("AccountSetting");
                });

            modelBuilder.Entity("Trace.Application.Account.UserRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Trace.Application.Engagement.Contact", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Relations");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Trace.Application.Engagement.Lead", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Trace.Application.Location.Location", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Trace.Application.Routes.Route", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Trace.Application.Tags.Tag", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Trace.Application.Tenant.Tenant", b =>
                {
                    b.Navigation("Contact");

                    b.Navigation("Domains");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("Trace.Application.Trailer.Trailer", b =>
                {
                    b.Navigation("Tags");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Trace.Application.Vehicle.Vehicle", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
