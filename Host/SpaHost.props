<Project>

  <PropertyGroup>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaProxyLaunchCommand>pnpm dev</SpaProxyLaunchCommand>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
  </PropertyGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>

    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project." />

    <!-- Ensure PNPM is installed -->
    <Exec Command="pnpm --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="PnpmErrorCode" />
    </Exec>
    <!-- <Exec Condition="'$(PnpmErrorCode)' != '0'" WorkingDirectory="$(SpaRoot)" Command="npm install -g pnpm" /> -->
    <Message Importance="high" Text="Restoring dependencies using 'pnpm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
  </Target>

  <Target Name="PublishRunNuxt" AfterTargets="ComputeFilesToPublish">
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="pnpm generate -- --configuration production" />
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <ItemGroup>
    <ProjectReference Include="..\..\ServiceDefaults\Trace.ServiceDefaults.csproj" />
    <ProjectReference Include="..\..\Common\Shared\Trace.Common.csproj" />

    <PackageReference Include="Aspire.StackExchange.Redis.OutputCaching" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" />
    <PackageReference Include="Microsoft.Extensions.ServiceDiscovery.Yarp" />
    <PackageReference Include="Yarp.ReverseProxy" />
  </ItemGroup>

</Project>
